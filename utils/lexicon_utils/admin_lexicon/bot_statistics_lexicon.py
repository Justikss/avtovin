from copy import copy

from utils.lexicon_utils.admin_lexicon.advert_parameters_lexicon import advert_parameters_captions
from utils.safe_dict_class import SafeDict

return_main_menu = {'return_main_menu': '–í –º–µ–Ω—é'}
pagination_interface = {'admin_pagination:-': '‚Üê', 'page_counter': '[{start}/{end}]', 'admin_pagination:+': '‚Üí'}
captions = {'backward': '‚óÇ –ù–∞–∑–∞–¥ ‚ñ∏', 'was_selected': '–í—ã –≤—ã–±—Ä–∞–ª–∏', 'cancel': '–û—Ç–º–µ–Ω–∏—Ç—å', 'confirm': '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',
            'sales': '–ø—Ä–æ–¥–∞–∂–∞–º', 'purchases': '–ø–æ–∫—É–ø–∫–∞–º', 'any': '–≤—Å—ë –≤—Ä–µ–º—è', 'day': '–¥–µ–Ω—å', 'week': '–Ω–µ–¥–µ–ª—é',
            'month': '–º–µ—Å—è—Ü', 'year': '–≥–æ–¥', 'days': '–¥–Ω–µ–π', 'feedbacks': '–æ—Ç–∫–ª–∏–∫–æ–≤',
            'dont_write_html_tags': '–ó–∞–ø—Ä–µ—â—ë–Ω –≤–≤–æ–¥ –∑–Ω–∞–∫–æ–≤ "&lt; &gt;".',
            'all_users': '–≤—Å–µ—Ö', 'buyers': '–ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π', 'sellers': '–ø—Ä–æ–¥–∞–≤—Ü–æ–≤', 'delete': '–£–¥–∞–ª–∏—Ç—å',
            'by_dealership': '–∞–≤—Ç–æ—Å–∞–ª–æ–Ω–∞',
            'by_seller': '—á–∞—Å—Ç–Ω–æ–≥–æ –ª–∏—Ü–∞', 'close': '–°–∫—Ä—ã—Ç—å', 'surname_name_patronymic': '–§–ò–û: ', 'add': '–î–æ–±–∞–≤–∏—Ç—å',
            'successfully': '–£—Å–ø–µ—à–Ω–æ'
            }

statistic_captions = {'Day': '–î–µ–Ω—å',
                    'Week': '–ù–µ–¥–µ–ª—è',
                    'Month': '–ú–µ—Å—è—Ü',
                    'Year': '–ì–æ–¥',
                    'General': '–û–±—â–∞—è',
                      'color': '–¶–≤–µ—Ç',
                      'complectation': '–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—é',
                      'model': advert_parameters_captions['model'],#.lower(),
                      'brand': advert_parameters_captions['brand'],#.lower(),
                      'engine': advert_parameters_captions['engine'],#.lower(),
                    'top_demand_on': '<b>–¢–æ–ø —Å–ø—Ä–æ—Å–∞ –∑–∞ {period}</b>',
                    'car': '–∞–≤—Ç–æ',
                    'individual_stats': '–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏',
                    'top_10_stats': '—Ç–æ–ø 10',
                      'bottom_demand_start': '–Ω–∏–∑–∫–æ–≥–æ',
                      'top_demand_start': '–≤—ã—Å—à–µ–≥–æ',
                      'for_current_period': '–ø–æ —Ç–µ–∫—É—â–µ–º—É –ø–µ—Ä–∏–æ–¥—É'
}

choose_period_keyboard = {'select_bot_statistic_period:day': statistic_captions['Day'],
                          'select_bot_statistic_period:week': statistic_captions['Week'],
                           'select_bot_statistic_period:month': statistic_captions['Month'],
                           'select_bot_statistic_period:year': statistic_captions['Year'],
                           'select_bot_statistic_period:all': statistic_captions['General']}

to_statistic_panel = {'admin_backward:to_statistic_panel': '–í –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'}

__STATISTIC_LEXICON = {
    'stats_is_empty': '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {for_current_period} –ø—É—Å—Ç–∞',
    'stats_loading': '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —Ä–∞—Å—á—ë—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...',
    'seller_statistic_view': {
    'message_text': "<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {period}:</b>\n" + (' ' * 13 + '‚îÄ' * 8) + "\n–ü—Ä–æ–¥–∞–≤–µ—Ü: <i>{seller_name}</i>\n–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: <i>{date_of_registration}</i>\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {adverts_count}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫–ª–∏–∫–æ–≤: {feedbacks_count}\n" + (' ' * 13 + '‚îÄ' * 12),
        'buttons': {'select_seller_statistic_period:day': statistic_captions['Day'],
                    'select_seller_statistic_period:week': statistic_captions['Week'],
                    'select_seller_statistic_period:month': statistic_captions['Month'],
                    'select_seller_statistic_period:year': statistic_captions['Year'],
                    'select_seller_statistic_period:all': statistic_captions['General'],
                    'admin_backward:check_seller_statistic_values': captions['backward'],
                    **return_main_menu, 'width': (3, 2, 1, 1)}},

    'choose_statistic_type': {
        'message_text': '<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –±–æ—Ç—É:</b>', 'buttons': {'general_statistics': 'üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
                                                               'demand_for_cars': 'üìâ –°–ø—Ä–æ—Å –Ω–∞ –∞–≤—Ç–æ',
                                                               **return_main_menu,
                                                               'width': 1}
    },

    'general_bot_statistics': {'message_text': '<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {period}</b>\n' + (' ' * 17 + '‚îÄ' * 8) + '\n<blockquote>üî∏–û—Ç–∫–ª–∏–∫–æ–≤: {feedbacks}\nüì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–π: {adverts}\
\nüßñ‚Äç‚ôÇÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ: {users}\nü§µüèª‚Äç‚ôÇÔ∏è –ü—Ä–æ–¥–∞–≤—Ü–æ–≤: {sellers}\nüë®üèª‚Äçüíª –ü–æ–∫—É–ø–∞—Ç–µ–ª–µ–π: {buyers}</blockquote>\n' + (' ' * 17 + '‚îÄ' * 8), 'buttons': {
                    **choose_period_keyboard,
                    'admin_backward:check_bot_statistic_values': captions['backward'],
                    **return_main_menu, 'width': (3, 2, 1, 1)}},

    'choose_statistics_output_method': {'message_text': '<b>–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:</b>', 'buttons': {
        'output_method:top_ten': '–¢–æ–ø 10  üëë', 'output_method:individual': 'üßëüèΩ‚Äçü¶± –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ',
        #'admin_backward:statistics_output_method': captions['backward'],
        **to_statistic_panel,
        'width': 2
    }},
    'choose_method_of_calculating': {'message_text': '<b>–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ —Ä–∞—Å—á—ë—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–ø—Ä–æ—Å–∞:</b>', 'buttons': {
        'calculate_method:top': '–í—ã—Å—à–∏–π —Å–ø—Ä–æ—Å üìà', 'calculate_method:bottom': 'üìâ –ù–∏–∑—à–∏–π —Å–ø—Ä–æ—Å',
        'admin_backward:method_of_calculate': captions['backward'],
        **to_statistic_panel,
        'width': 2
    }},

    'top_ten_message_text':  '<b>–í—ã–≤–æ–¥ –æ—Ç —Å–∞–º–æ–≥–æ {demand_direction} –ø–æ —Å–ø—Ä–æ—Å—É</b>\n–ú–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ: {top_position}\n–û—Ç–∫–ª–∏–∫–æ–≤ –∑–∞ {period}: {feedback_count}{parameters}\n<b>–°–∞–º—ã–π –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–¥–∞–≤–µ—Ü —ç—Ç–æ–π –º–∞—à–∏–Ω—ã:</b>\n<blockquote>{seller_entity}</blockquote>\n' \
                        + ('‚îÄ' * 15) + '\n<b>–ú–∞—à–∏–Ω—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã —Å–≤–æ–∏–º –º–µ—Å—Ç–æ–º –≤ —Ç–æ–ø–µ:</b>',

    'custom_params_period': {'message_text': '<b>–ü–µ—Ä–∏–æ–¥ —Ä–∞—Å—á—ë—Ç–∞ {output_method} —Å–ø—Ä–æ—Å–∞:</b>',
                             'buttons': {
                                 **choose_period_keyboard,
                                 'admin_backward:custom_params_period': captions['backward'],
                                 **to_statistic_panel,
                                 'width': 3
                             }},

    'review_custom_stats_branches': {'message_text': '', 'buttons': {
        **pagination_interface,
        'admin_backward:choose_custom_params': captions['backward'],
        **to_statistic_panel,
        'width': 3
    }}
}

statistic_class_lexicon_ru = {
    'select_custom_params_process_message_text': '–¢–æ–ø —Å–ø—Ä–æ—Å–∞ –Ω–∞ {object_entity}\n–∑–∞ {period}\n–°–ø–∏—Å–æ–∫ –ø–æ —É–±—ã–≤–∞–Ω–∏—é –æ—Ç —Å–∞–º–æ–π {popular_state} {param_type}:',
    'output_current_top_buttons': '–í—ã–≤–µ—Å—Ç–∏ —Ç–µ–∫—É—â–∏–π —Ç–æ–ø',
    'choose_custom_params_to_stats_message_text': '{header}\n–°–ø–∏—Å–æ–∫ {demand_order} —Å–ø—Ä–æ—Å–∞;\n<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä: {param}:</b>',
    'backward': '‚óÇ –ù–∞–∑–∞–¥ ‚ñ∏',
    'to_statistic_panel': '–í –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏',
    'by_more': '–ø–æ —É–≤–µ–ª–∏—á–µ–Ω–∏—é',
    'by_low': '–ø–æ —É–±—ã–≤–∞–Ω–∏—é'
}

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —É–∑–±–µ–∫—Å–∫–∏–π —Å–ª–æ–≤–∞—Ä—å
statistic_class_lexicon_uz = {
    'select_custom_params_process_message_text': '{object_entity} bo‚Äòyicha eng ko‚Äòp talab\n{period} davomida\n{param_type} bo‚Äòyicha kamayish tartibida ro‚Äòyxatlanadi:',
    'output_current_top_buttons': 'Joriy topni chiqarish',
    'choose_custom_params_to_stats_message_text': '{header}\nTalabning {demand_order} tartibidagi ro‚Äòyxati;\n<b>Variantni tanlang: {param}:</b>',
    'backward': '‚óÇ Orqaga ‚ñ∏',
    'to_statistic_panel': 'Statistika menyusida',
    'by_more': "o'sish bilan",
    'by_low': "pasaytiruvchi"
}

statistic_class_lexicon = SafeDict({'ru': statistic_class_lexicon_ru,
                                    'uz': statistic_class_lexicon_uz})




class SelectCustomParamsProcess:
    def __init__(self):
        self.message_text = statistic_class_lexicon['select_custom_params_process_message_text']  # –ò–ª–∏ lexicon_uz –¥–ª—è —É–∑–±–µ–∫—Å–∫–æ–π –≤–µ—Ä—Å–∏–∏
        self.width = 1
        self.backward_buttons = {'admin_backward:select_custom_params': statistic_class_lexicon['backward'],
                                    'admin_backward:to_statistic_panel': statistic_class_lexicon['to_statistic_panel']}
        self.buttons_callback_data = 'bot_statistic_param:'
        self.output_current_top_buttons = {'output_current_top': statistic_class_lexicon['output_current_top_buttons']}


class TopTenDisplay:
    def __init__(self):
        self.buttons_callback_data = 'ttp:'
        self.backward_command = {'admin_backward:top_ten_display': statistic_class_lexicon['backward'],
                            'admin_backward:to_statistic_panel': statistic_class_lexicon['to_statistic_panel']}
        self.width = 1
        self.dynamic_buttons = 2


class ChooseCustomParamsToStats:
    def __init__(self, period, param_to_output, calculate_method, chosen_params=None):
        self.buttons_callback_data = 'custom_demand_param:'
        self.backward_command = {'admin_backward:choose_custom_params': statistic_class_lexicon['backward'],
                            'admin_backward:to_statistic_panel': statistic_class_lexicon['to_statistic_panel']}
        self.output_top_button = {'output_current_demand_stats': statistic_class_lexicon['output_current_top_buttons']}
        self.width = 1
        self.dynamic_buttons = 2

        self.dynamic_buttons = self.dynamic_buttons if param_to_output == 'engine' else 3
        self.message_text = statistic_class_lexicon['choose_custom_params_to_stats_message_text'].format(
            header='{header}',
            demand_order=statistic_class_lexicon['by_low'] if calculate_method == 'bottom' else statistic_class_lexicon['by_more'],
            param=advert_parameters_captions[param_to_output]
        )

        if chosen_params:
            self.backward_command = {**self.output_top_button, **self.backward_command}
        else:
            self.backward_command = self.backward_command

SelectCustomParamsProcess = SelectCustomParamsProcess()
TopTenDisplay = TopTenDisplay()