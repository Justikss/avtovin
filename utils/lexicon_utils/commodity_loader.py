from handlers.state_handlers.seller_states_handler.load_new_car.boot_car_buttons_controller import RedisBootCommodityHelper
from utils.lexicon_utils.lexicon_uz.commodity_loader_uz import commodity_loader_lexicon_uz
from utils.safe_dict_class import SafeDict, SmartGetattr

commodity_loader_lexicon_ru = {
    'button_backward': '‚óÇ –ù–∞–∑–∞–¥ ‚ñ∏',
    'cancel_button': '–û—Ç–º–µ–Ω–∞',
    'confirm_buttons': '‚úì –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úì',
    'edit_button': '‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å ‚öôÔ∏è',

    'state_text': '–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ:',
    'engine_text': '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è:',
    'brand_text': '–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫—É –∞–≤—Ç–æ:',
    'model_text': '–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ:',
    'complectation_text': '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—é:',
    'year_text': '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –≥–æ–¥–∞ –≤—ã–ø—É—Å–∫–∞ –∞–≤—Ç–æ:',
    'mileage_text': '–ñ–µ–ª–∞–µ–º—ã–π –ø—Ä–æ–±–µ–≥:',
    'color_text': '–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —Ü–≤–µ—Ç:',
    'load_other_color_text': '–í–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è:',
    # 'make_sure_selected_other_color_text': '–í—ã –≤—ã–±—Ä–∞–ª–∏: <i>X —Ü–≤–µ—Ç</i>',
    'load_other_color_incorrect_message_text': '\n<b>–¶–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤(–ª–∏–±–æ —Å –¥–µ—Ñ–∏—Å–æ–º).</b>',
    'price_only': '''–°—Ç–æ–∏–º–æ—Å—Ç—å ''',
    'input_price': '–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ:',
    'price_digital': '<blockquote><b>–°—Ç–æ–∏–º–æ—Å—Ç—å: <i>{price}</i></b></blockquote>',

    'edit_button_captions': {'price': '–°—Ç–æ–∏–º–æ—Å—Ç—å {price}', 'year_of_release': '–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: {year}', 'mileage': '–ü—Ä–æ–±–µ–≥: {mileage} –∫–º.'},
    'input_price_text': '–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å:',
    'input_photo_text': '–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è\n(–∑–Ω–∞—á–æ–∫ —Å–∫—Ä–µ–ø–∫–∏ –≤ –ª–µ–≤–æ–º —É–≥–ª—É —á–∞—Ç–∞)\n\n(!–æ—Ç 5 –¥–æ 8 —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤!)\n\n–ù–µ –æ—Ç–º–µ–Ω—è–π—Ç–µ —Å–∂–∞—Ç–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ\n—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º.',
    'edit_photo_caption': '–§–æ—Ç–æ',
    'config_for_seller': '<b>–í–∞—à–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–≤—Ç–æ:</b>',
    'can_rewrite_config': '–í–æ–∑–º–æ–∂–Ω–∞ –ø–µ—Ä–µ–ø–∏—Å—å –ø–æ–ª–µ–π –ø–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É',

    'config_for_admins': '<b>–ó–∞—è–≤–∫–∞ ID:</b><i>{request_id}</i>\n',

    'seller_notification_text': '–ó–∞—è–≤–∫–∞ ‚Ññ{request_number} —Å–æ–∑–¥–∞–Ω–∞!'
}

commodity_loader_lexicon = SafeDict({'ru': commodity_loader_lexicon_ru,
                                     'uz': commodity_loader_lexicon_uz})

class BaseBootButtons(SmartGetattr):

    def __init__(self):
        super().__init__()

        self.base_last_buttons = {'boot_car_backward': commodity_loader_lexicon['button_backward'],
                            'cancel_boot_new_commodity': commodity_loader_lexicon['cancel_button']}
        self.width = 2
        self.message_text = ''
        self.dynamic_buttons = 2

    async def part(self):
        return {'message_text': self.message_text, 'buttons': {**self.base_last_buttons, 'width': self.width}}



class LexiconCommodityLoader(SmartGetattr):
    class load_commodity_state(BaseBootButtons):
        def __init__(self):
            super().__init__()
            self.message_text = f'''<b>{commodity_loader_lexicon['state_text']}</b>'''
            self.buttons_callback_data = 'load_state_'
            self.width = 2
            self.dynamic_buttons = 1
            self.last_buttons = {'cancel_boot_new_commodity': commodity_loader_lexicon['button_backward']}

    class load_commodity_engine_type(BaseBootButtons, RedisBootCommodityHelper):
        def __init__(self):
            super().__init__()
            self.message_text = f'''<b>{commodity_loader_lexicon['engine_text']}</b>'''
            self.buttons_callback_data = 'load_engine_'
            self.width = 2
            self.last_buttons = self.base_last_buttons

    class load_commodity_brand(BaseBootButtons, RedisBootCommodityHelper):
        def __init__(self):
            super().__init__()
            self.message_text = f'''<b>{commodity_loader_lexicon['brand_text']}</b>'''
            self.buttons_callback_data = 'load_brand_'
            self.width = 2
            self.last_buttons = self.base_last_buttons

    class load_commodity_model(BaseBootButtons, RedisBootCommodityHelper):
        def __init__(self):
            super().__init__()
            self.message_text = f'''<b>{commodity_loader_lexicon['model_text']}</b>'''
            self.buttons_callback_data = 'load_model_'
            self.width = 2
            self.last_buttons = self.base_last_buttons

    # load_commodity_model = {, 'buttons': {, , 'width': 2}}
    class load_commodity_complectation(BaseBootButtons, RedisBootCommodityHelper):
        def __init__(self):
            super().__init__()
            self.message_text = f'''<b>{commodity_loader_lexicon['complectation_text']}</b>'''
            self.buttons_callback_data = 'load_complectation_'
            self.width = 1
            self.last_buttons = self.base_last_buttons

    class load_commodity_year_of_realise(BaseBootButtons, RedisBootCommodityHelper):
        def __init__(self):
            super().__init__()
            self.message_text = f'''<b>{commodity_loader_lexicon['year_text']}</b>'''
            self.buttons_callback_data = 'load_year_'
            self.width = 2
            self.last_buttons = self.base_last_buttons
    class load_commodity_mileage(BaseBootButtons, RedisBootCommodityHelper):
        def __init__(self):
            super().__init__()
            self.message_text = f'''<b>{commodity_loader_lexicon['mileage_text']}</b>'''
            self.buttons_callback_data = 'load_mileage_'
            self.dynamic_buttons = 3
            self.width = 2
            self.last_buttons = self.base_last_buttons
    class load_commodity_color(BaseBootButtons, RedisBootCommodityHelper):
        def __init__(self):
            super().__init__()
            self.message_text = f'''<b>{commodity_loader_lexicon['color_text']}</b>'''
            self.buttons_callback_data = 'load_color_'
            self.width = 2
            self.dynamic_buttons = 2
            self.last_buttons = self.base_last_buttons

    class load_commodity_price(BaseBootButtons, RedisBootCommodityHelper):
        def __init__(self):
            super().__init__()
            self.message_text = f'''<b>{commodity_loader_lexicon['input_price_text']}</b>'''
            self.width = 1
            self.last_buttons = self.base_last_buttons

    class load_commodity_photo(BaseBootButtons, RedisBootCommodityHelper):
        def __init__(self):
            super().__init__()
            self.message_text = commodity_loader_lexicon['input_photo_text']
            self.width = 1
            self.last_buttons = self.base_last_buttons

    def __init__(self):
        super().__init__()

        # load_other_color = {'message_text': commodity_loader_lexicon'–í–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è:', 'buttons': {'rewrite_boot_color': commodity_loader_lexicon'‚óÇ –ù–∞–∑–∞–¥ ‚ñ∏', 'cancel_boot_new_commodity': commodity_loader_lexicon'üö´ –û—Ç–º–µ–Ω–∞ üö´', 'width': 1}}
        # make_sure_selected_other_color = {'message_text': '–í—ã –≤—ã–±—Ä–∞–ª–∏: <i>X —Ü–≤–µ—Ç</i>', 'buttons': {'make_sure_other_color': '‚úì –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úì', 'rewrite_other_boot_color': '‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å ‚öôÔ∏è', 'width': 1}}
        self.load_other_color_incorrect_message_text = commodity_loader_lexicon['load_other_color_incorrect_message_text']
        self.price_only = commodity_loader_lexicon['price_only']
        self.input_price = commodity_loader_lexicon['input_price']
        self.price_digital = commodity_loader_lexicon['price_digital']
        self.edit_button_captions = commodity_loader_lexicon['edit_button_captions']
        self.load_commodity_state = self.load_commodity_state
        self.load_commodity_engine_type = self.load_commodity_engine_type
        self.load_commodity_brand = self.load_commodity_brand
        self.load_commodity_model = self.load_commodity_model
        self.load_commodity_complectation = self.load_commodity_complectation
        self.load_commodity_year_of_realise = self.load_commodity_year_of_realise
        self.load_commodity_mileage = self.load_commodity_mileage
        self.load_commodity_color = self.load_commodity_color
        self.load_commodity_price = self.load_commodity_price
        self.load_commodity_photo = self.load_commodity_photo

        self.edit_photo_caption = commodity_loader_lexicon['edit_photo_caption']


        self.config_for_seller = commodity_loader_lexicon['config_for_seller']
        self.can_rewrite_config = commodity_loader_lexicon['can_rewrite_config']
        self.config_for_seller_button_callbacks = ('rewrite_boot_state', 'rewrite_boot_engine', 'rewrite_boot_brand', 'rewrite_boot_model', 'rewrite_boot_complectation', 'rewrite_boot_year', 'rewrite_boot_mileage', 'rewrite_boot_color', 'rewrite_boot_price', 'rewrite_boot_photo')

        self.config_for_admins = commodity_loader_lexicon['config_for_admins']

        self.seller_notification = {'message_text': commodity_loader_lexicon['seller_notification_text']}

BaseBootButtons = BaseBootButtons()
LexiconCommodityLoader = LexiconCommodityLoader()
